server:
  port: 8081
spring:
  kafka:
    template:
      default-topic: iot-event
    bootstrap-servers: kafka.ssp-develop.staging-virginia.remarkai.org:9092 #kafka接入点 #TODO
    jaas:
      enabled: true
      login-module: org.apache.kafka.common.security.scram.ScramLoginModule
      options:
        username: remark
        password: remark2021
    properties:
      security.protocol: SASL_SSL
      topic: iot-event
      sasl.mechanism: SCRAM-SHA-256
      session.timeout.ms: 600000
      request.timeout.ms: 600000
      #ssl.truststore.location: /{your_path}/server.truststore.jks #TODO
    producer:
      # 发生错误后，消息重发的次数。
      retries: 0
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。      batch-size: 16384      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      groupId: consumer-group-test
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为 Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer



#kafka:
#  bootstrap-servers:  kafka.ssp-develop.staging-virginia.remarkai.org:9092 #Kafka集群
#  producer:    #生产者配置
#    retries: 0
#    acks: 1    # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
#    batch-size: 16384 # 批量大小
#    properties:
#      linger:
#        ms: 0   # 提交延时 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka   linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了
#    buffer-memory: 33554432 # 生产端缓冲区大小
#    key-serializer: org.apache.kafka.common.serialization.StringSerializer #Kafka提供的序列化
#    value-serializer: org.apache.kafka.common.serialization.StringSerializer #Kafka提供的反序列化类
#  consumer:
#    properties:
#      group:
#        id: defaultConsumerGroup # 默认的消费组ID
#      session:
#        timeout:
#          ms: 120000 # 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
#      request:
#        timeout:
#          ms: 180000 # 消费请求超时时间
#    enable-auto-commit: true # 是否自动提交offset
#    auto-offset-reset: latest # 当kafka中没有初始offset或offset超出范围时将自动重置offset 参数值earliest:重置为分区中最小的offset; latest:重置为分区中最新的offset(消费分区中新产生的数据); none:只要有一个分区不存在已提交的offset,就抛出异常;
#    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer #Kafka提供的序列化
#    value-deserializer: org.apache.kafka.common.serialization.StringDeserializer #Kafka提供的反序列化类
#    auto-commit-interval: 1000ms # 提交offset延时(接收到消息后多久提交offset)
